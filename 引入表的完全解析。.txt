exe需要链接一个非__imp

那么就产生一个临时的非__imp函数。
那么此时，填入STUB。可是STUB怎么知道引DLL的函数呢？

奇葩了。。。。。。。其实都是用的引入表吧。
真正的区别在于，最后会不会修改到原obj文件的问题。
如果不使用import，那么解析到函数，函数被当做原始函数对待，
引入表在其它的节，即库类型的节里头。

而EXE编译成了函数调用，并维持一个符号。
这个符号去匹配到了链接库？？？？？
还是CALL 符号xxx。

CALL 符号 XXX。结果匹配到了DLL当中的，
EXE代码已确立，因此新增其它的代码，来进行引入。

而CALL [XXX]。则已知形态。
已经为导入表调用方式了。

对啊，先编译，再链接。

先编译的obj，不加import就会编译成call 地址 形式。
链接期间才知道这是个dll符号，那么又不能修改原有的xxx的情况下，就只能临时给
一个地址过去给obj了。
call xxx地址。是绝对跳转，直接给出dll函数名的地址而不给出临时调用代码的话，是根本不可行的。

比如call dll函数地址。xxx可变。而且reloc的功能是针对本模块产生的。

那么call dword ptr[ xxx ]，也不可能，因为指令长度不一样。
改变成为这种形式，就代表了要重新编译整个obj。或者导致下放所有的代码都产生位移。
或者绝对地址错乱。

不能中途插入字节或者移出字节。nice！


反正匹配到了就会生成引入表信息。