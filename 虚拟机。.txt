Intercepret进行解释执行的时候，主要关注的是一条指令的上下文，
如 c=a + b，那么a 放到哪里，b放到哪里，c又是什么，
即，堆栈机和状态机虚拟机两者的实现上有巨大的差异，
但操作数的空间分配必然是有限个数的，
字节码方不需要预先控制代码中富含的状态，
也不太可能控制，
因为你需要提供命名规范，而生成的命名标识总会用完，并且重复。

①代码当中不太可能进行自动命名。
②虚拟机也不可能为指令操作数进行随机分配。


虚拟机必须提供通用部分，或者是共用存储区域。
适当时候消除堆栈。
CPU是状态机和堆栈机的结合。因为它执行指令的上下文环境只有寄存器和内存。
但寄存器不可能是无限的，一旦寄存器用完后CPU分配的虚拟寄存器代码无法知道。

同时一条指令过程中也不太可能操作过多的操作数，所以最好的方法即，
在过度使用操作数后，考虑将状态机的寄存器保存到堆栈当中，以免寄存器耗尽。
假设8个通用寄存器跨越了一段50个字节的上下文，而这个上下文八个寄存器通通用了，
那么就需要堆栈的保存机制了。
但是堆栈也不提供临时拓展。临时拓展几乎只出现在函数调用时，压入参数或_cdecl调用c
函数时使用，