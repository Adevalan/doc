首先，"呵呵"是UTF-16BE，其转换成GBK，之后GBK转UTF-16BE。
默认JVM构建String的时候使用的是UTF-16BE。因此以UTF-16BE读入的文件，需要转换成同等意义的GBK编码。
两种方式：
一，先以UTF-16构造一个保存的位置。
二，当底层字符代码与当前字节集不符合时，往往会出现一些错误。
例如
我，UTF-16 = 10
    GBK = 50

此时我们以UTF-16读入50，再转换至GBK，就出问题了。

因此方式一并不适用。
而方式二较为适用，其采用数组来接收文本，在构造String的时候产生了新的字符串特殊化对象。
而这个String能否被jvm正常显示，还有待探讨。。。。理论上，也是转换成了底层的字符信息。
或者保存了字串转换信息(如：当前编码 GBK)。
这里有两种这实现的方法。
JVM Hotspot VM 实现的方式是先转换成底层支持的字符串流。全JVM底层统一使用一套字符串流。
那这样输出到文件时永远都不能写出底层串流以外的格式编码了？？？
每次都是写出String统一的编码数组。显然不行。。。。。通用一点的解决方案就是在写出的时候，
以数组的形式写出到文件。
getBytes()之后然后再把这个Bytes写出到文件当中，而构造java可用String时，还是以底层的编码。

jvm底层只支持自己的字符串集，而用户可产生自定义的String。。。。也可以产生自定义的byte[]数组。
如果只要用到原生的rt.jar里头的类，就要面临被默认范化到底层UTF-8字符支持集的情景。
