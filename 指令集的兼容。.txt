指令集的兼容遵循如下动作：
机器码整体来说肯定是不一样的。但有可能会有重合。
重合会导致CPU在不同状态下知行的语义不同。
没有重合的指令，只在一个模式下有用。所以最好来说，是按照什么指令集的代码，就切换CPU到什么模式，
不要妄想可以用一套指令集概述来跑另一套指令集。那简直就是不科学的。
而且CPU也不可能对每个版本都作出拓展和补充，会死人的。

另外，16位指令与32位指令不一样，16位指令大多都很好的兼容到了32位指令，
所以利用32位CPU模式跑16位指令语义基本不变，因为32位字长的指令重合了16位字长的指令集。
32位CPU的指令集包含了16位CPU的指令集。
如果不包含，则不能出现如下代码。

这只是设计方式上的不同，
你可以让一个CPU模式支持多个模式的指令。但是带来的开销会比较大，特化出的指令必须向下兼容并且保持相同的语义。
那么RISC的弊端就暴露出来了，指令会变得越来越长。

也可以让一个CPU的模式只支持一种模式的指令。很简单直接的想法。



16位都是实模式把，32位都是保护模式。64位是增强制模式。